if (world.matrix[torus(xpos + x), torus(ypos + y)] == 0){
world.matrix[torus(xpos + x), torus(ypos + y)] <- plant
}
}
}
}
}
}
# Population Counter
world.vector = as.vector(world.matrix)
plant_1_count <- 0
plant_2_count <- 0
for (w in 1:length(world.vector)){
if (world.vector[w] == 1){
plant_1_count = plant_1_count + 1
}
if (world.vector[w] == 2){
plant_2_count = plant_2_count + 1
}
}
plant_1[i] = plant_1_count
plant_2[i] = plant_2_count
#  image(world.matrix,
#        col = c("black","red","blue"), main = paste("Timestep ",i))
if (plant_1[i] == 0){
plant_2_wins <- plant_2_wins + 1
}
if (plant_2[i] == 0){
plant_1_wins <- plant_1_wins + 1
}
if (plant_1[i] == 0 | plant_2[i] == 0){
time.max = i
break
}
}
# Visualization and Diversity Report
#plot(plant_1, type = "l", xlab = "t", ylab = "n",
#     main = "Plant Populations",
#     col = "red",
#     ylim = c(0, world_length^2 + 200),
#     xlim = c(0, time.max)
#)
#lines(plant_2, col = "blue", type = "l")
#abline(h = world_length^2, col = "green")
#legend(0, (world_length^2 + 200), legend = c("Plant 1","Plant 2"), fill = c("red","blue"))
#d = (plant_1[time.max]/(plant_2[time.max]+plant_1[time.max]))^2 + (plant_2[time.max]/(plant_1[time.max]+plant_2[time.max]))^2
#cat("Diversity", d,
#    "\n", "Plant 1 End Population", plant_1[time.max],
#    "\n", "Plant 2 End Population", plant_2[time.max])
}
setwd("~/Documents/Uni/Research")
data = read.csv("DeltaResults.csv")
plot(data)
plot(data$PP1W, data$Delta, ylab="Delta")
plot(data,
xlab="Difference in Starting Population Size (Plant One Compared to Plant Two)",
ylab="Percent Win (10 Trials At Population Size)"
)
plot(data,
xlab="Difference in Starting Population Size \
(Plant One Compared to Plant Two)",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data,
xlab="   Difference in Starting Population Size \
(Plant One Compared to Plant Two)",
ylab="Percent Win\(10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data,
xlab="   Difference in Starting Population Size \
(Plant One Compared to Plant Two)",
ylab="Percent Win \ (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data,
xlab="   Difference in Starting Population Size \
(Plant One Compared to Plant Two)",
ylab="Percent Win \
(10 Trials At Population Size)",
main="Starting Population Bias"
)
ylab="Percent Win
plot(data,
xlab="   Difference in Starting Population Size \
(Plant One Compared to Plant Two)",
ylab="Percent Win
(10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data,
xlab="   Difference in Starting Population Size \
(Plant One Compared to Plant Two)",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data,
xlab="   Difference in Starting Population Size
(Plant One Compared to Plant Two)",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data,
xlab="    Difference in Starting Population Size
(Plant One Compared to Plant Two)",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data,
xlab="Difference in Starting Population Size\n(Plant One Compared to Plant Two)",
ylab="Percent Win\n(10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data,
xlab="Difference in Starting Population Size\n(Plant One Compared to Plant Two)",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
setwd("~/Documents/Uni/Research")
data = read.csv("DeltaResults.csv")
plot(data,
xlab="Difference in Starting Population Size\n(Plant One Compared to Plant Two)",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
data
plot(data$Delta, data$PP1W,
xlab="",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data$Delta, asin(data$PP1W),
xlab="",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
asin(1)
asin(.9)
plot(data$Delta, asin(data$PP1W/100)*2/pi
xlab="",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data$Delta, asin(data$PP1W/100)*2/pi,
xlab="",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data$Delta, asin(sqrt(data$PP1W)),
xlab="",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data$Delta, asin(data$PP1W),
xlab="",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data$Delta, arc(sqrt(data$PP1W))
xlab="Difference in Starting Population Size\n(Plant One Compared to Plant Two)",
ylab="Percent Win (10 Trials At Population Size)",
main="Starting Population Bias"
)
plot(data$Delta, arc(sqrt(data$PP1W)),
xlab="Difference in Starting Population Size\n(Plant One Compared to Plant Two)",
ylab="Arcsin Sqrt. Transformed Win Proportion",
main="Starting Population Bias"
)
plot(data$Delta, asin(sqrt(data$PP1W)),
xlab="Difference in Starting Population Size\n(Plant One Compared to Plant Two)",
ylab="Arcsin Sqrt. Transformed Win Proportion",
main="Starting Population Bias"
)
shapiro.test(data$Delta)
shapiro.test(asin(sqrt(data$PP1W)))
box(asin(sqrt(data$PP1W)))
boxplot(asin(sqrt(data$PP1W)))
shapiro.test(asin(sqrt(data$PP1W)))
wilcox.test(data$Delta, asin(sqrt(data$PP1W))
)
wilcox.test(data$Delta, asin(sqrt(data$PP1W)))
wilcox.test(data$Delta, asin(sqrt(data$PP1W)), paired=T)
cor(data$Delta, asin(sqrt(data$PP1W)), method="Spearman")
cor(data$Delta, asin(sqrt(data$PP1W)), method="spearman")
cor.test(data$Delta, asin(sqrt(data$PP1W)), method="spearman")
cor.test(data$Delta, asin(sqrt(data$PP1W)), method="spearman", alternative="two.sided")
cor.test(data$Delta, data$PP1W, method="spearman", alternative="two.sided")
cor.test(data$Delta, asin(sqrt(data$PP1W)), method="spearman", alternative="two.sided")
plot(data$Delta, asin(sqrt(data$PP1W)),
xlab="Difference in Starting Population Size\n(Plant One Compared to Plant Two)",
ylab="Win Proportion (Arcsin Sqrt Transformation",
main="Starting Population Bias"
)
plot(data$Delta, asin(sqrt(data$PP1W)),
xlab="Difference in Starting Population Size\n(Plant One Compared to Plant Two)",
ylab="Win Proportion (Arcsin Sqrt Transformation)",
main="Starting Population Bias"
)
cor.test(data$Delta, asin(sqrt(data$PP1W)), method="spearman", alternative="two.sided")
abs(0)
exponent = function(a,b)
{
if (b > 0){
output = 1
i = 0
while ( i < b ){
output = output*a
i = i + 1
}
return (output)
} else {
output = 1
i = 0
while (i < abs(b)){
output = output*a
i = i + 1
}
return (1/output)
}
}
exponent(3,0)
a = 3
b = 0
output = 1
i = 0
while (i < abs(b)){
output = output*a
i = i + 1
}
return (1/output)
}
output = 1
i = 0
while (i < abs(b)){
output = output*a
i = i + 1
}
exponent = function(a,b)
{
output = 1
i = 0
while ( i < b ){
output <- output*a
i <- i + 1
}
if (b > 0){
}
return (output)
} else {}
return (1/output)
}
exponent = function(a,b)
{
output = 1
i = 0
while ( i < b ){
output <- output*a
i <- i + 1
}
if (b > 0){
return (output)
} else {
return (1/output)
}
}
9^-6
exponent(9,-6)
6^6
exponent(6,6)
exponent = function(a,b)
{
output = 1
i = 0
while ( i < abs(b) ){
output <- output*a
i <- i + 1
}
if (b > 0){
return (output)
} else {
return (1/output)
}
}
9^-6
exponent(9,-6)
main.data = read.csv("airports.csv")
route.data = read.csv("routes.csv")
setwd("~/Documents/Uni/Research/airport_flu_modeling/R model/Data")
main.data = read.csv("airports.csv")
route.data = read.csv("routes.csv")
View(main.data)
fix.mat <- matrix(1:length(main.data$ID[length(main.data)]), nc=1)
View(fix.mat)
fix.mat <- matrix(1:length(main.data$ID[length(main.data$ID)]), nc=1)
fix.mat <- matrix(length(main.data$ID[length(main.data$ID)]), nc=1)
fix.mat <- 1:length(main.data$ID[length(main.data$ID)])
fix.mat
length(main.data$ID[length(main.data$ID)])
fix.mat <- 1:main.data$ID[length(main.data$ID)]
fix.mat <- matrix(1:main.data$ID[length(main.data$ID)], nc = 1)
View(fix.mat)
i = 12
main.data$ID[i]
main.data$ID[12]
View(main.data)
i = 130
main.data$ID[i]
for (i in 1:length(main.data)){
fix.mat <- fix.mat[main.data$ID[i],2]
}
fix.mat <- fix.mat[,2]
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], NA, nc = 2)
View(fix.mat)
fix.mat
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], 0, nc = 2)
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], 0), nc = 2)
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], NA), nc = 2)
View(fix.mat)
na.col <- vector(length = main.data$ID[length(main.data$ID)])
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], na.col), nc = 2)
View(fix.mat)
for (i in 1:length(main.data)){
fix.mat <- fix.mat[main.data$ID[i],2]
}
main.data = read.csv("airports.csv")
route.data = read.csv("routes.csv")
# Create complete list of Airport IDs
na.col <- vector(length = main.data$ID[length(main.data$ID)])
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], na.col), nc = 2)
for (i in 1:length(main.data$ID)){
fix.mat <- fix.mat[main.data$ID[i],2]
}
main.data$ID
for (i in 1:length(main.data$ID)){
fix.mat <- fix.mat[main.data$ID[i,2]]
}
fix.mat[,2]
na.col <- vector(length = main.data$ID[length(main.data$ID)])
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], na.col), nc = 2)
for (i in 1:length(main.data$ID)){
fix.mat <- fix.mat[main.data$ID[i],2]
}
fix.mat[,2]
na.col <- vector(length = main.data$ID[length(main.data$ID)])
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], na.col), nc = 2)
View(fix.mat)
fix.mat[,2]
for (i in 1:length(main.data$ID)){
fix.mat[,2] <- main.dat$ID[i]
}
View(main.data)
View(fix.mat)
for (i in 1:length(main.data$ID)){
fix.mat[,2] <- main.data$ID[i]
}
View(fix.mat)
for (i in 1:length(main.data$ID)){
fix.mat[main.data$ID[i],2] <- main.data$ID[i]
}
View(fix.mat)
View(main.data)
View(main.data)
View(fix.mat)
View(fix.mat)
View(main.data)
main.data[9167]
length(main.data$ID)
main.data$ID[7733]
main.data$nat[7733]
main.data$ID[118]
for (i in 1:length(main.data$ID)){
fix.mat[main.data$ID[i],2] <- main.data$ID[i]
}
View(fix.mat)
na.col <- vector(length = main.data$ID[length(main.data$ID)])
# Makes mixed matrix.
fix.mat <- matrix(c(1:main.data$ID[length(main.data$ID)], na.col), nc = 2)
# Apply true #s to correct ID in string.
for (i in 1:length(main.data$ID)){
fix.mat[main.data$ID[i],2] <- main.data$ID[i]
}
View(fix.mat)
problem.points <- list()
problem.points <- 1
problem.points <- c(problem.points, 2)
problem.points <- list()
for (i in 1:length(main.data$ID)){
if (fix.mat[i,2] == 0){
problem.points <- c(problem.points, fix.mat[i,2])
}
}
problem.points
problem.points[1]
problem.points[2]
problem.points[3]
problem.points <- list()
for (i in 1:length(main.data$ID)){
if (fix.mat[i,2] == 0){
problem.points <- c(problem.points, fix.mat[i,1])
}
}
problem.points
problem.points[i]
problem.points[1]
remove <- matrix(problem.points)
View(remove)
View(route.data)
View(remove)
length(remove)
View(route.data)
View(route.data)
for (i in 1:length(route.data$FromNum)){
for (k in 1:length(remove)){
if (route.data$FromNum[i] == remove[k] || route.data$ToNum[i] == remove[k]){
route.data$FromNum[i] <- NA
}
}
}
View(route.data)
for (i in 1:length(route.data$FromNum)){
for (k in 1:length(remove)){
if (route.data$FromNum[i] == remove[k]){
route.data$FromNum[i] <- NA
}
if (route.data$ToNum[i] == remove[k]){
route.data$FromNum[i] <- NA
}
}
}
for (i in 1:length(route.data$FromNum)){
for (k in 1:length(remove)){
if (route.data$FromNum[i] == remove[k]){
route.data$FromNum[i] <- NA
}
if (route.data$ToNum[i] == remove[k]){
route.data$ToNum[i] <- NA
}
}
}
route.data = read.csv("routes.csv")
for (i in 1:length(route.data$FromNum)){
for (k in 1:length(remove)){
if (route.data$FromNum[i] == remove[k]){
route.data$FromNum[i] <- NA
}
if (route.data$ToNum[i] == remove[k]){
route.data$ToNum[i] <- NA
}
}
}
flight.data <- route.data[complete.cases(route.data),]
write.data(flight.data, file="flight.data.csv",sep=",",row.names=F))
write.data(flight.data, file="flight.data.csv",sep=",",row.names=F)
write.table(flight.data, file="flight.data.csv",sep=",",row.names=F)
library(igraph)
main.data = read.csv("airports.csv")
route.data = read.csv("flight.data.csv")
vertices <- main.data$ID]
vertices <- main.data$ID
vertices <- matrix(vertices)
air.net <- graph.empty()
air.net <- add.vertices(air.net, nrow(vertices),
ID = as.character(vertices[,1])
)
edges <- matrix(c(route.data[,2], route.data[,4]), nc = 2)
View(edges)
air.net <- add.edges(air.net, t(edges),
from = edges[,1],
to = edges[,2]
)
route.data = read.csv("routes.csv")
route.data <- route.data[complete.cases(route.data),]
for (i in 1:length(route.data$FromNum)){
for (k in 1:length(remove)){
if (route.data$FromNum[i] == remove[k]){
route.data$FromNum[i] <- NA
}
if (route.data$ToNum[i] == remove[k]){
route.data$ToNum[i] <- NA
}
}
}
flight.data <- route.data[complete.cases(route.data),]
write.table(flight.data, file="flight.data.csv",sep=",",row.names=F)
View(flight.data)
# Epidemiology of the Airways
# By Nick Yager, Matthew Taylor
# Last Update: Jan 31th, 2014
#
#
# Purpose: To build a working network model to simulate a disease/pathogen using the
# air travel system to propogate.
# Libraries
library(igraph)
# Read in data files.
main.data = read.csv("airports.csv")
route.data = read.csv("flight.data.csv")
# Fake Vertice Fix
vertices <- main.data$ID
vertices <- matrix(vertices)
# Make Network Code
air.net <- graph.empty()
air.net <- add.vertices(air.net, nrow(vertices),
ID = as.character(vertices[,1])
)
edges <- matrix(c(route.data[,2], route.data[,4]), nc = 2)
#edges <- edges[complete.cases(edges),] # Gets rid of NAs
air.net <- add.edges(air.net, t(edges),
from = edges[,1],
to = edges[,2]
)
