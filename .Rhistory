"source.id",
"destination.airport",
"destination.id")
)
routes = subset(routes, destination.id %in% airports$airport.id,
select = c("airline",
"airline.id",
"source.id",
"destination.airport",
"destination.id")
)
network <- graph.data.frame( c(routes$source.id, routes$destination.id)  )
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
plot(network)
V(network)
V(network)$name
tkplot(network)
library("tcltk", lib.loc="/usr/lib/R/library")
tkplot(network)
plot(network)
network
network[1]
network$edges
network
E(network)
as.vector(E(network))
V(network)
from(2901)
V(network)
V(network) [ degree( network ) > 0]
network <- delete.vertices(g, which(degree(network) < 2)-1)
network <- delete.vertices(network, which(degree(network) < 2)-1)
plot(network)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 3)-1)
plot(network)
network <- delete.vertices(network, which(degree(network) < 5)-1)
plot(network)
network <- delete.vertices(network, which(degree(network) < 10)-1)
plot(network)
E(network)[1719]
V(network)[1719]
V(network)[from(1719)]
degree(1719)
degree(network)
network <- delete.vertices(network, which(degree(network) < 10)-1)
plot(network)
network <- delete.vertices(network, which(degree(network) < 5)-1)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 1)-1)
plot(network)
degree(network)
network <- delete.vertices(network, which(degree(network) <= 2)-1)
degree(network)
network <- delete.vertices(network, which(degree(network) <= 2)-1)
network <- delete.vertices(network, which(degree(network) <= 2)-1)
plot(network)
degree(network)
network[1]
network[2]
network[3]
network[30]
network[1000]
network[440]
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 1)-1)
plot(network)
plot(network,
vertex.size=0.5
)
plot(network,
vertex.size=1
)
plot(network,
vertex.size=5,
arrow.size=0.1
)
plot(network,
vertex.size=5,
edge.arrow.size=0.1
)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 2)-1)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 20)-1)
network <- delete.vertices(network, which(degree(network) < 2)-1)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- delete.vertices(network, which(degree(network) < 1)-1)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- delete.vertices(network, which(degree(network) < 1)-1)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 1)-1)
network <- delete.vertices(network, which(degree(network) < 2)-1)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
rglplot(network)
betweenness(network)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 1)-1)
network <- delete.vertices(network, which(betweenness(network) < 0.000001)-1)
which(betweenness(network) < 0.000001)
which(betweenness(network) < 0.000001) - 1
network <- delete.vertices(network, which(betweenness(network) < 0.000001) - 1)
network <- delete.vertices(network, which(betweenness(network) < 0.0001) - 1)
betweenness(network)
for (v in 1:length(betweenness(network))) {
if ( betweenness(network)[v - 1] < 0.00001) {
print(v-1)
}
}
for (v in 1:length(betweenness(network))) {
if ( betweenness(network)[[v - 1]] < 0.00001) {
print(v-1)
}
}
betweenness(network)
betweenness(network)[1]
betweenness(network)[1-1]
for (v in 1:length(betweenness(network))) {
if ( betweenness(network)[[v]] < 0.00001) {
print(v)
}
}
for (v in 1:length(betweenness(network))) {
if ( betweenness(network)[[v]] < 0.00001) {
network <- delete.vertices(network, v)
}
}
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 1)-1)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network1 <- delete.vertices(network, which(degree(network) < 2)-1)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network1 <- delete.vertices(network, which(degree(network) < 2)-1)
network2 <- delete.vertices(network1, which(degree(network1) < 2)-1)
plot(network2,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network1 <- delete.vertices(network, which(degree(network) < 2)-1)
network2 <- delete.vertices(network1, which(degree(network1) < 1)-1)
plot(network2,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network3 <- delete.vertices(network2, which(degree(network2) < 1)-1)
plot(network3,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network4 <- delete.vertices(network3, which(degree(network3) < 1)-1)
plot(network4,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 2)-1)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- delete.vertices(network, which(degree(network) < 1)-1)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
which(degree(network) < 1)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 2))
network <- delete.vertices(network, which(degree(network) < 1))
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
network <- graph.data.frame( cbind(routes$source.id, routes$destination.id)  )
network <- delete.vertices(network, which(degree(network) < 3))
network <- delete.vertices(network, which(degree(network) < 2))
network <- delete.vertices(network, which(degree(network) < 1))
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
)
betweenness(network)
start_position = sample(V(network))
start_position = sample(1,V(network))
start_position = sample(1,V(network))
start_position = sample(1,V(network))
start_position = sample(V(network), 1)
start_position
E(network)["2993"]
E(network)[2993]
E(network)[from(2993)]
get.edges(network)
get.edges(network, E(network))
start_position = sample(V(network), 1)
start_position
E(network)[522]
E(network)[1401]
V(network)[1401]
V(network)["1401"]
V(network)[from(1401)]
V(network)[to(1401)]
length(V(network))
V(network)[0]
V(network)[1]
start_position = sample(1, seq(1, length(V(network)),1 ))
start_position = sample(1, seq(1, length(V(network)),1 ))
start_position = sample(seq(1, length(V(network)),1 ), 1)
start_position = sample(seq(1, length(V(network)),1 ), 1)
start_position = sample(seq(1, length(V(network)),1 ), 1)
V(network)[from(start_position)]
V(network)[to
(start_position)]
V(network)[0]
V(network)[1]
V(network)
V(network)[from(max_ticks)]
V(network)[from(start_position)]
position = sample(seq(1, length(V(network)),1 ), 1)
V(network)[from(position)]
next_position = V(network)[from(position)]
next_position = V(network)[from(position)][1]
next_position = V(network)[from(position)]
next_position = V(network)[from(position)]
next_position = V(network)[from(position),1]
next_position = V(network)[from(position)][1]
next_position
next_position = V(network)[from(position)]
next_position = V(network)[from(position)][0]
next_position = V(network)[from(position)]
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position = V(network)[from(position)]
}
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position = V(network)[from(position)]
}
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1
color=V(network)$color
)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
col=V(network)$color
)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
vertex.col=V(network)$color
)
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
vertex.color=V(network)$color
)
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position = V(network)[from(position)]
print(position)
}
position = 10
V(network)[from(position)]
V(network)[from("2958")]
V(network)[from("1602")]
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position <- V(network)[from(position)]
print(position)
}
position
position = 10
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position <- V(network)[from(position)]
print(position)
}
V(network)[10]
V(network)[20]
V(network)["1567"]
V(network)[from("1567")]
V(network)[from("1533")]
V(network)[from("1389")]
position = sample(seq(1, length(V(network)),1 ), 1)
position = V(network)[sample(seq(1, length(V(network)),1 ), 1)]
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position <- V(network)[from(position)]
print(position)
}
V(network)[from(position)]
V(network)[to(position)]
V(network)[from(position)]
V(network)[from("1430")]
as.vector(V(network)[from("1430")])
as.vector(V(network)[10])
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position <- as.vector(V(network)[from(position)])[1]
print(position)
}
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position <- as.vector(V(network)[from(position)])[1]
print(position)
}
as.vector(V(network)[from(position)])[1]
as.vector(V(network)[to(position)])[1]
as.vector(V(network)[from(position)])[1]
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position <- as.vector(V(network)[from(position)])[1] - 1
print(position)
}
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position <- as.vector(V(network)[from(position)])
print(position)
}
position = sample(seq(1, length(V(network)),1 ), 1)
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
position <- as.vector(V(network)[from(position)])
print(position)
}
as.vector(V(network)[from(5)])
as.vector(V(network)[to(1)])
as.vector(V(network)[5])
as.vector(V(network)[nei(5)])
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
neigh <- as.vector(V(network)[nei(position)])
position <- sample(neigh,1)
print(position)
}
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
vertex.color=V(network)$color
)
V(network)$color <- "black"
E(network)$color <- "gray"
V(network)$color <- "black"
E(network)$color <- "gray"
############### Set a random starting point
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
neigh <- as.vector(V(network)[nei(position)])
previous_position <- position
position <- sample(neigh,1)
E(g)[previous_position %--% position]$color <- "red"
print(position)
}
V(network)$color <- "black"
E(network)$color <- "gray"
############### Set a random starting point
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
neigh <- as.vector(V(network)[nei(position)])
previous_position <- position
position <- sample(neigh,1)
E(network)[previous_position %--% position]$color <- "red"
print(position)
}
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
edge.color=E(network)$color,
vertex.color=V(network)$color
)
V(network)$color <- NA
E(network)$color <- "gray"
############### Set a random starting point
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
neigh <- as.vector(V(network)[nei(position)])
previous_position <- position
position <- sample(neigh,1)
E(network)[previous_position %--% position]$color <- "red"
print(position)
}
############### Plot the network.
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
edge.color=E(network)$color,
vertex.color=V(network)$color
)
V(network)$color <- NA
E(network)$color <- NA
############### Set a random starting point
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 100
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
neigh <- as.vector(V(network)[nei(position)])
previous_position <- position
position <- sample(neigh,1)
E(network)[previous_position %--% position]$color <- "red"
print(position)
}
############### Plot the network.
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
edge.color=E(network)$color,
vertex.color=V(network)$color
)
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 1000
for (i in 1:max_ticks) {
V(network)[position]$color <- "red"
neigh <- as.vector(V(network)[nei(position)])
previous_position <- position
position <- sample(neigh,1)
E(network)[previous_position %--% position]$color <- "red"
print(position)
}
############### Plot the network.
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
edge.color=E(network)$color,
vertex.color=V(network)$color
)
V(network)$color <- NA
E(network)$color <- NA
############### Set a random starting point
position = sample(seq(1, length(V(network)),1 ), 1)
max_ticks = 1000
for (i in 1:max_ticks) {
V(network)[position]$color <- rainbow(max_ticks)[i]
neigh <- as.vector(V(network)[nei(position)])
previous_position <- position
position <- sample(neigh,1)
E(network)[previous_position %--% position]$color <- rainbow(max_ticks)[i]
print(position)
}
############### Plot the network.
plot(network,
vertex.size=5,
vertex.label=NA,
edge.arrow.size=0.1,
edge.color=E(network)$color,
vertex.color=V(network)$color
)
