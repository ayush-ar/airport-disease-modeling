num.days.E = 6 # Number of weeks individuals are incubating
num.days.Ia = 6 # number of days individuals are infectious
num.days.Is = num.days.Ia
num.days.D = 50
num.Is.T1 = 0 # number of infectious individuals at start
num.Ia.T1 = 1 # number of infectious individuals at start
arrive=10 #day CDC arrives
# Setting up the Network ---------------------------------------------------
g = watts.strogatz.game(dim = 1, size = N,
nei = 3, # nei = degree(k)/2
p = 0.05) # rewiring parameter
g <- set.vertex.attribute(g, "state", value="S")     # Setting all individuals to default S
g <- set.vertex.attribute(g, "dayI", value=0)       # Time step they became infectious (0 = not)
g <- set.vertex.attribute(g, "dayD", value=0)       # Time step they became dormant (0 = not)
g <- set.vertex.attribute(g, "dayE", value=0)       # Time step they became infectious (0 = not)
g <- set.vertex.attribute(g, "age", value=runif(N, min=0, max=5200))
temp_V = sample(length(V(g)),num.Is.T1) # Randomly choosing infectious individuals to start
V(g)[temp_V]$state = "Is"  # change state from "S" to "I"
V(g)[temp_V]$dayI = 1  # it becomes infectious on day 1
temp_V = sample(length(V(g)),num.Ia.T1) # Randomly choosing infectious individuals to start
V(g)[temp_V]$state = "Ia"  # change state from "S" to "I"
V(g)[temp_V]$dayI = 1  # it becomes infectious on day 1
dayB = 1
rateB = 0.1765  # Rate of birth
dayD = 1
rateD = 0.1765  # Rate of death
# Algorithm ----------------------------------------------------------------
# 1. setup data matrix and then start daily ("Day") loop
# 2. Recover infectious individuals if sick for more than Num_Days_I
# 3. Highest Degree Distribution Antidote!!
# 4. Get list of infectious individuals
# 5. If list is empty
#      quit!
#    else
# 6.   randomize list of sickies
# 7. Empty list, sytematically trying to get neighbors sick
# 8. Count number in each state
# 9. Graph
# 1. setup data matrix and then start Day-ly loop --------------------------
# hint: modify
sick.data = matrix(c(1,N-num.Is.T1-num.Ia.T1,0,length(which(V(g)$state=="Is")),length(which(V(g)$state=="Is")),0),ncol = 6)
for (Day in 2:num.Days) {
# 1. Add new vertices and edges as per necessary
if (dayB >= 1/rateB) {
# Add a new child, reset the counter as per necessary
number_added = round(rnorm(1, mean(degree(g)), sd(degree(g))))
sample_edges<- sample(V(g),number_added)
g <- add.vertices(g,1,attr=list("state"="S",
"dayI"=0,
"dayD"=0,
"dayE"=0))
new_index <- length(V(g))
g <- add.edges(g, rbind(rep(new_index, number_added), sample_edges))
dayB = 0
} else {
dayB <- dayB + 1
}
# Kill off some nodes.
if (dayD >= 1/rateD) {
sample_vertex<- sample(V(g),1)
g <- delete.vertices(g,sample_vertex)
dayD = 0
} else {
dayD <- dayD + 1
}
# 2. Dormant --------------------------------------------------------------
for (i in 1:length(V(g))) {
if (V(g)[i]$state == "Is" && V(g)[i]$dayI > num.days.Ia) {
V(g)[i]$state = "D"
V(g)[i]$dayI = 0
V(g)[i]$dayD = 1
} else {
V(g)[i]$dayI = V(g)[i]$dayI + 1
}
if (V(g)[i]$state == "Ia" && V(g)[i]$dayI > num.days.Is) {
V(g)[i]$state = "D"
V(g)[i]$dayI = 0
V(g)[i]$dayD = 1
} else {
V(g)[i]$dayI = V(g)[i]$dayI + 1
}
if (V(g)[i]$state == "E" && V(g)[i]$dayE > num.days.E) {
if (runif(1) >= 0.6) {
# Asymptomatic
V(g)[i]$state = "Ia"
} else{
# Symptomatic
V(g)[i]$state = "Is"
}
V(g)[i]$dayI = 1
} else {
V(g)[i]$dayE = V(g)[i]$dayE + 1
}
}
# 3. Reactivate Dormants ---------------------------------------------------
for (i in 1:length(V(g))) {
if (V(g)[i]$state == "D" && V(g)[i]$dayD > num.days.D) {
V(g)[i]$state = "Ia"
V(g)[i]$dayI = 1
V(g)[i]$dayD = 0
} else {
V(g)[i]$dayD = V(g)[i]$dayD + 1
}
}
# 3. ANTIDOTE CODE: --------------------------------------------------------
#     Again, only those that have been infectious for 2 days show symptoms
#     and can recieve the antidote. Be sure you are only giving the antidote to
#     five INFECTIOUS individuals of the highest degree, and remember you are
#     only giving the antidote to at most 5 of the highest degree individuals,
#     starting on day 10.
#   if (Day >= arrive) {
#
#     # Check if dayI > 2 and if infectious still.
#     infectious = which(V(g)$state == "I")
#     detectable = which(V(g)$dayI >= 2)
#
#     # Fetch degrees
#     neighbor.count <- degree(g)[detectable]
#
#     number.top = 0.01 * N # This should be 5!
#     top.neighbor.count <- order(neighbor.count, decreasing=T)[1:number.top]
#
#     V(g)[top.neighbor.count]$state = "V"
#
#   }
# 4. Get list of infectious individuals ----------------------------------
sickS = which(V(g)$state == "Is")
sickA = which(V(g)$state == "Ia")
dormant = which(V(g)$state == "D")
# 5. If list is empty then quit! -----------------------------------------
if (length(sickS) == 0 && length(sickA) == 0 && length(dormant) == 0) {
cat("No more infectious individuals so stopping!\n")
break  # End the "Day" loop
}
# 6. Randomize list ------------------------------------------------------
if (length(sickS) >= 1){
sickS = sample(sickS) # randomize the vertex IDs of sick[] individuals
for (i in 1:length(sickS)) {
neighbors = as.integer(V(g)[nei(sickS[i])]) #  list of neighbors of each sicky
if (length(neighbors) > 0) {
for (j in 1:length(neighbors)) { # for each neighbor of sick ind I
# if neighbor is susceptible try to infect
if (V(g)[neighbors[j]]$state == "S" & (runif(1) < NCRs)) {
# Determine if symptomatic or asymptomatic
V(g)[neighbors[j]]$state = "E" # make neighbor sick
V(g)[neighbors[j]]$dayE = 1 # record day
}
}
}
}
}
if (length(sickA) >= 1){
sickA = sample(sickA) # randomize the vertex IDs of sick[] individuals
for (i in 1:length(sickA)) {
neighbors = as.integer(V(g)[nei(sickA[i])]) #  list of neighbors of each sicky
if (length(neighbors) > 0) {
for (j in 1:length(neighbors)) { # for each neighbor of sick ind I
# if neighbor is susceptible try to infect
if (V(g)[neighbors[j]]$state == "S" & (runif(1) < NCRa)) {
# Determine if symptomatic or asymptomatic
V(g)[neighbors[j]]$state = "E" # Expose a neighbor
V(g)[neighbors[j]]$dayE = 1 # record day
}
}
}
}
}
# 8. Count number infectious and add to data matrix with Day -------------
# hint: modify
NS = length(which(V(g)$state == "S")) # num susceptibles
NE = length(which(V(g)$state == "E")) # num infectious
NIs = length(which(V(g)$state == "Is")) # num recovered
NIa = length(which(V(g)$state == "Ia")) # num recovered
ND = length(which(V(g)$state == "D")) # num recovered
sick.data = rbind(sick.data,c(Day,NS, NE,NIa, NIs,ND))
}
return(sick.data)
}
sick.data <- network_simulation(N=100, num.Days=10, vaccination_age, vaccination_effort)
library(igraph)
sick.data <- network_simulation(N=100, num.Days=10, vaccination_age, vaccination_effort)
# 9. The Graph -------------------------------------------------------------
# hint: modify
matplot(sick.data[,2:6], type = "l", lty = 1,lwd = 3,
main = "Network Model",
ylab = "Abundance",
xlab = "Time",
cex.lab = 1.5)
leg.txt = c("S","E","Ia","Is","D")                         # this is just legend text
legend("right",leg.txt,col=1:5,lwd=3, cex= 1)
degree.sick.data <- sick.data
sick.data <- network_simulation(N=100, num.Days=50, vaccination_age, vaccination_effort)
# 9. The Graph -------------------------------------------------------------
# hint: modify
matplot(sick.data[,2:6], type = "l", lty = 1,lwd = 3,
main = "Network Model",
ylab = "Abundance",
xlab = "Time",
cex.lab = 1.5)
leg.txt = c("S","E","Ia","Is","D")                         # this is just legend text
legend("right",leg.txt,col=1:5,lwd=3, cex= 1)
degree.sick.data <- sick.data
# NAME: Nicholas A. Yager
rm(list=ls())
library(igraph)
set.seed(100) #DO NOT CHANGE THIS!
network_simulation <- function(N, num.weeks, vaccination_age, vaccination_effort) {
NCRa = 0.25  # neighbor contact rate asymptomatic = P(getting neighbor sick each week)
NCRs = 0.125 # neighbor contact rate symptomatic = P(getting neighbor sick each week)
num.weeks.E = 6  # Number of weeks individuals are incubating
num.weeks.Ia = 6 # number of weeks individuals are infectious
num.weeks.Is = num.weeks.Ia
num.weeks.D = 50
num.Is.T1 = 0 # number of infectious individuals at start
num.Ia.T1 = 1 # number of infectious individuals at start
arrive=10 #week CDC arrives
# Setting up the Network ---------------------------------------------------
g = watts.strogatz.game(dim = 1, size = N,
nei = 3, # nei = degree(k)/2
p = 0.05) # rewiring parameter
g <- set.vertex.attribute(g, "state", value="S")     # Setting all individuals to default S
g <- set.vertex.attribute(g, "weekI", value=0)       # Time step they became infectious (0 = not)
g <- set.vertex.attribute(g, "weekD", value=0)       # Time step they became dormant (0 = not)
g <- set.vertex.attribute(g, "weekE", value=0)       # Time step they became infectious (0 = not)
g <- set.vertex.attribute(g, "age", value=runif(N, min=0, max=5200))
temp_V = sample(length(V(g)),num.Is.T1) # Randomly choosing infectious individuals to start
V(g)[temp_V]$state = "Is"  # change state from "S" to "I"
V(g)[temp_V]$weekI = 1  # it becomes infectious on week 1
temp_V = sample(length(V(g)),num.Ia.T1) # Randomly choosing infectious individuals to start
V(g)[temp_V]$state = "Ia"  # change state from "S" to "I"
V(g)[temp_V]$weekI = 1  # it becomes infectious on week 1
weekB = 1
rateB = 0.1765  # Rate of birth
weekD = 1
rateD = 0.1765  # Rate of death
# Algorithm ----------------------------------------------------------------
# 1. setup data matrix and then start weekly ("week") loop
# 2. Recover infectious individuals if sick for more than Num_weeks_I
# 3. Highest Degree Distribution Antidote!!
# 4. Get list of infectious individuals
# 5. If list is empty
#      quit!
#    else
# 6.   randomize list of sickies
# 7. Empty list, sytematically trying to get neighbors sick
# 8. Count number in each state
# 9. Graph
# 1. setup data matrix and then start week-ly loop --------------------------
# hint: modify
sick.data = matrix(c(1,N-num.Is.T1-num.Ia.T1,0,length(which(V(g)$state=="Is")),length(which(V(g)$state=="Is")),0),ncol = 6)
for (week in 2:num.weeks) {
# 1. Population Dynamics ---------------------------------------------------
# Add newly born individuals.
if (weekB >= 1/rateB) {
edges_added = round(rnorm(1, mean(degree(g)), sd(degree(g)))) # Number of edges to add
sample_edges<- sample(V(g),edges_added)       # Randomly select vertices to connect to
g <- add.vertices(g,1,attr=list("state"="S", "weekI"=0,"weekD"=0,"weekE"=0)) # Add vertex
new_index <- length(V(g)) # Get the vertex id.
g <- add.edges(g, rbind(rep(new_index, edges_added), sample_edges)) # Add edges to it
weekB = 0
} else {
weekB <- weekB + 1 # Increment the week
}
# Kill off some individuals.
if (weekD >= 1/rateD) {
sample_vertex<- sample(V(g),1)         # Randomly select a vertex
g <- delete.vertices(g,sample_vertex)  # Obliterate it.
weekD = 0
} else {
weekD <- weekD + 1 # Increment the week
}
# 2. Activate and Deactivate infectious individuals -----------------------
for (i in 1:length(V(g))) {
if (V(g)[i]$state == "Is" && V(g)[i]$weekI > num.weeks.Ia) {
V(g)[i]$state = "D"
V(g)[i]$weekI = 0
V(g)[i]$weekD = 1
} else {
V(g)[i]$weekI = V(g)[i]$weekI + 1
}
if (V(g)[i]$state == "Ia" && V(g)[i]$weekI > num.weeks.Is) {
V(g)[i]$state = "D"
V(g)[i]$weekI = 0
V(g)[i]$weekD = 1
} else {
V(g)[i]$weekI = V(g)[i]$weekI + 1
}
if (V(g)[i]$state == "E" && V(g)[i]$weekE > num.weeks.E) {
if (runif(1) >= 0.6) {
# Asymptomatic
V(g)[i]$state = "Ia"
} else{
# Symptomatic
V(g)[i]$state = "Is"
}
V(g)[i]$weekI = 1
} else {
V(g)[i]$weekE = V(g)[i]$weekE + 1
}
}
# 3. Reactivate Dormant ---------------------------------------------------
for (i in 1:length(V(g))) {
if (V(g)[i]$state == "D" && V(g)[i]$weekD > num.weeks.D) {
V(g)[i]$state = "Ia"
V(g)[i]$weekI = 1
V(g)[i]$weekD = 0
} else {
V(g)[i]$weekD = V(g)[i]$weekD + 1
}
}
# 3. ANTIDOTE CODE: --------------------------------------------------------
#     Again, only those that have been infectious for 2 weeks show symptoms
#     and can recieve the antidote. Be sure you are only giving the antidote to
#     five INFECTIOUS individuals of the highest degree, and remember you are
#     only giving the antidote to at most 5 of the highest degree individuals,
#     starting on week 10.
#   if (week >= arrive) {
#
#     # Check if weekI > 2 and if infectious still.
#     infectious = which(V(g)$state == "I")
#     detectable = which(V(g)$weekI >= 2)
#
#     # Fetch degrees
#     neighbor.count <- degree(g)[detectable]
#
#     number.top = 0.01 * N # This should be 5!
#     top.neighbor.count <- order(neighbor.count, decreasing=T)[1:number.top]
#
#     V(g)[top.neighbor.count]$state = "V"
#
#   }
# 4. Get list of infectious and dormant individuals ----------------------------------
sickS = which(V(g)$state == "Is")
sickA = which(V(g)$state == "Ia")
dormant = which(V(g)$state == "D")
# 5. If lists are empty then quit! -----------------------------------------
if (length(sickS) == 0 && length(sickA) == 0 && length(dormant) == 0) {
cat("No more infectious individuals so stopping!\n")
break  # End the "week" loop
}
# 6. Randomize lists and expose succeptable indiciduals --------------------
# Handle symptomatic first, for no particular reason.
if (length(sickS) >= 1){
sickS = sample(sickS) # randomize the vertex IDs of sick[] individuals
for (i in 1:length(sickS)) {
neighbors = as.integer(V(g)[nei(sickS[i])]) #  list of neighbors of each sicky
if (length(neighbors) > 0) {
for (j in 1:length(neighbors)) { # for each neighbor of sick ind I
# if neighbor is susceptible try to infect
if (V(g)[neighbors[j]]$state == "S" & (runif(1) < NCRs)) {
V(g)[neighbors[j]]$state = "E" # make neighbor sick
V(g)[neighbors[j]]$weekE = 1 # record week
}
}
}
}
}
# Infect from the asymptomaic folks.
if (length(sickA) >= 1){
sickA = sample(sickA) # randomize the vertex IDs of sick[] individuals
for (i in 1:length(sickA)) {
neighbors = as.integer(V(g)[nei(sickA[i])]) #  list of neighbors of each sicky
if (length(neighbors) > 0) {
for (j in 1:length(neighbors)) { # for each neighbor of sick ind I
# if neighbor is susceptible try to infect
if (V(g)[neighbors[j]]$state == "S" & (runif(1) < NCRa)) {
V(g)[neighbors[j]]$state = "E" # Expose a neighbor
V(g)[neighbors[j]]$weekE = 1 # record week
}
}
}
}
}
# 8. Count number infectious and add to data matrix with week -------------
NS = length(which(V(g)$state == "S")) # num susceptibles
NE = length(which(V(g)$state == "E")) # num exposed
NIs = length(which(V(g)$state == "Is")) # num symptomatic infectious
NIa = length(which(V(g)$state == "Ia")) # num asymptomtic infectious
ND = length(which(V(g)$state == "D")) # num dormant
sick.data = rbind(sick.data,c(week,NS, NE,NIa, NIs,ND))
}
return(sick.data)
}
vaccination_age = 0
vaccination_effort = 0.05
sick.data <- network_simulation(N=100, num.weeks=50, vaccination_age, vaccination_effort)
# 9. The Graph -------------------------------------------------------------
# hint: modify
matplot(sick.data[,2:6], type = "l", lty = 1,lwd = 3,
main = "Network Model",
ylab = "Abundance",
xlab = "Time",
cex.lab = 1.5)
leg.txt = c("S","E","Ia","Is","D")                         # this is just legend text
legend("right",leg.txt,col=1:5,lwd=3, cex= 1)
degree.sick.data <- sick.data
setwd("~/projects/airport_flu_modeling/data/edge-based/delay-0")
library(MASS)
filelist = dir()
read_to_M <- function(filelist) {
print(filelist)
toremove = c()
for (i in 1:length(filelist)) {
filesize  = file.info(filelist[i])$size
print(filesize)
if (filesize == 0) {
toremove = append(toremove, i)
}
}
if (length(toremove) > 0) {
filelist = filelist[-toremove]
}
number_of_strategies = length(filelist)
M = matrix(ncol = 21, nrow = number_of_strategies, byrow=T)
# Fill the matrix with data
for( strategy in 1:number_of_strategies ) {
data = read.csv(filelist[strategy])
for (row in 1:length(data$effort)) {
M[strategy,row] <- data$total_infected[row]/data$total_infected[1]
}
}
return(M)
}
types = c("betweenness","cluster","random","weight")
par(mfrow=c(2,2))
for (type_num in 1:length(types)){
type = types[type_num]
random <- read_to_M(dir(type,full.names=T))
medians = apply(random, 2, mean)
effort = seq(0, 100, 5)
data = as.data.frame(cbind(effort, medians/3289))
names(data) <- c("Effort", "Median")
write.csv(data, paste(type,".csv",sep=""), row.names=F)
write.matrix(random, paste(type,".matrix",sep=""), sep=",")
# A nice distribution graph -------------------------------------------
boxplot(random,
main=paste(type,"-based quaratine strategy",sep=""),
xlab="Quarantine Effort", ylab="Proportion of airports infected",
xaxt = "n", ylim=c(0,1.5))
axis(1,1:21, seq(0,100,5))
lines(apply(random, 2, mean), col="red")
lines(apply(random, 2, median), col="blue")
}
par(mfrow=c(1,1))
#image(random, col=rainbow(3000))
#
#
#  barplot(medians/3307,
#          names=effort,
#          main="Effect of quarantine strategies on median number of infections.",
#          xlab="Degree-based quarantine effort",
#          ylab="Proportion of airports infected",
#          ylim=c(0,1))
#  abline(h=0)
setwd("~/projects/airport_flu_modeling/data/edge-based/delay-1")
library(MASS)
filelist = dir()
read_to_M <- function(filelist) {
print(filelist)
toremove = c()
for (i in 1:length(filelist)) {
filesize  = file.info(filelist[i])$size
print(filesize)
if (filesize == 0) {
toremove = append(toremove, i)
}
}
if (length(toremove) > 0) {
filelist = filelist[-toremove]
}
number_of_strategies = length(filelist)
M = matrix(ncol = 21, nrow = number_of_strategies, byrow=T)
# Fill the matrix with data
for( strategy in 1:number_of_strategies ) {
data = read.csv(filelist[strategy])
for (row in 1:length(data$effort)) {
M[strategy,row] <- data$total_infected[row]/data$total_infected[1]
}
}
return(M)
}
types = c("betweenness","cluster","random","weight")
par(mfrow=c(2,2))
for (type_num in 1:length(types)){
type = types[type_num]
random <- read_to_M(dir(type,full.names=T))
medians = apply(random, 2, mean)
effort = seq(0, 100, 5)
data = as.data.frame(cbind(effort, medians/3289))
names(data) <- c("Effort", "Median")
write.csv(data, paste(type,".csv",sep=""), row.names=F)
write.matrix(random, paste(type,".matrix",sep=""), sep=",")
# A nice distribution graph -------------------------------------------
boxplot(random,
main=paste(type,"-based quaratine strategy",sep=""),
xlab="Quarantine Effort", ylab="Proportion of airports infected",
xaxt = "n", ylim=c(0,1.5))
axis(1,1:21, seq(0,100,5))
lines(apply(random, 2, mean), col="red")
lines(apply(random, 2, median), col="blue")
}
par(mfrow=c(1,1))
#image(random, col=rainbow(3000))
#
#
#  barplot(medians/3307,
#          names=effort,
#          main="Effect of quarantine strategies on median number of infections.",
#          xlab="Degree-based quarantine effort",
#          ylab="Proportion of airports infected",
#          ylim=c(0,1))
#  abline(h=0)
