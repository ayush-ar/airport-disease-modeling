summary(data.aov)
TukeyHSD(data.aov)
#
library(multcomp)
data <- HSD.test(data.aov.tk, "tx" ,group=T)
M <- tapply(data.stacked$infected,list(data.stacked$qtype, data.stacked$effort),mean)
sd <- tapply(data.stacked$infected,list(data.stacked$qtype, data.stacked$effort),sd)
n <- tapply(data.stacked$infected,list(data.stacked$qtype, data.stacked$effort),length)
#M <- M[,order(M[2,],decreasing=T)]
CI95 = (qnorm(0.975)  * sd / sqrt(n) )   / 3286
colors <- rep(c("gray20",
"gray50",
"gray80"),4)
#colors[7] <- "firebrick4"
bp = barplot(M/3286 ,beside=T, col=colors,
xlab="Closure Effort (% of routes canceled)",
ylab="Proportion of Airports Infected",
main="Comparison of Cancelation Strategies",
ylim=c(0,0.5)
)
legend("topright", legend=rownames(M), fill=colors, cex=0.8)
plotCI(bp, as.vector(M)/3286, CI95, add=T, pch=NA)
text(x=as.vector(bp),y=as.vector(M/3286)+CI95,c("B","B","B",
"D","C","A",
"G","F","E",
"J","I","H",
"M","L","K"
), pos=3,cex=0.8)
abline(h=0)
# # Comparison of directed and undirected -------------------------------------
# BD <- as.data.frame(read.csv("directed/betweenness.matrix",header=F))
# BU <- as.data.frame(read.csv("undirected/betweenness.matrix",header=F))
#
# r <- data.frame()
# k = 1
#
# for (i in c(1,2,3,4,5)) {
#   for (j in 1:50) {
#     r[k,1] <- "betweenness"
#     r[k,2] <- as.character((i-1)*5)
#     r[k,3] <- BD[j,i]
#     r[k,4] <- "directed"
#     k = k + 1
#   }
# }
#
# for (i in c(1,2,3,4,5)) {
#   for (j in 1:50) {
#     r[k,1] <- "betweenness"
#     r[k,2] <- as.character((i-1)*5)
#     r[k,3] <- BU[j,i]
#     r[k,4] <- "undirected"
#     k = k + 1
#   }
# }
#
# data.stacked <- r
# names(data.stacked) <- c("qtype","effort","infected", "networktype")
# data.aov = aov(data.stacked$infected~data.stacked$networktype*data.stacked$effort)
# summary(data.aov)
#
# # Network type is not important (P = 0.601). Effort is important (P < 0.001).
# # There are no interations
#
# TukeyHSD(data.aov)
#
# tx <- with(data.stacked, interaction(effort, networktype))
# data.aov.tk = aov(data.stacked$infected~tx)
#
# data <- HSD.test(data.aov.tk, "tx" ,group=T)
#
# M <- tapply(data.stacked$infected,list(data.stacked$networktype, data.stacked$effort),median)
# M <- M[,order(M[2,],decreasing=T)]
#
# CI95 = qt(1-0.05/2,9)*(sd(data.stacked$infected)/sqrt(length(data.stacked$infected)))
#
# bp = barplot(M,beside=T,
#              xlab="Quarantine Effort (% of airports closed)", ylab="Number of infected airports",
#              main="Comparison of betweenness-based quarantine\non different network types",
#              ylim=c(0,4500))
# legend(x=12,y=4500, legend=c("Directed","Undirected"), fill=c("gray30","gray90"), cex=0.75)
# plotCI(bp, M, CI95, add=T, pch=NA)
# text(x=as.vector(bp),y=as.vector(M)+CI95,c("A","A",
#                                            "B","B",
#                                            "C","C",
#                                            "D","D",
#                                            "D","D"), pos=3)
# abline(h=0)
#
CI95 = (qnorm(0.975)  * sd / sqrt(n) )   / 3286
colors <- rep(c("gray20",
"gray50",
"gray80"),4)
colors[7] <- "firebrick4"
bp = barplot(M/3286 ,beside=T, col=colors,
xlab="Closure Effort (% of routes canceled)",
ylab="Proportion of Airports Infected",
main="Comparison of Cancelation Strategies",
ylim=c(0,0.5)
)
legend("topright", legend=rownames(M), fill=colors, cex=0.8)
plotCI(bp, as.vector(M)/3286, CI95, add=T, pch=NA)
text(x=as.vector(bp),y=as.vector(M/3286)+CI95,c("B","B","B",
"D","C","A",
"G","F","E",
"J","I","H",
"M","L","K"
), pos=3,cex=0.8)
abline(h=0)
CI95 = (qnorm(0.975)  * sd / sqrt(n) )   / 3286
colors <- rep(c("gray20",
"gray50",
"gray80"),4)
colors[8] <- "firebrick4"
bp = barplot(M/3286 ,beside=T, col=colors,
xlab="Closure Effort (% of routes canceled)",
ylab="Proportion of Airports Infected",
main="Comparison of Cancelation Strategies",
ylim=c(0,0.5)
)
legend("topright", legend=rownames(M), fill=colors, cex=0.8)
plotCI(bp, as.vector(M)/3286, CI95, add=T, pch=NA)
text(x=as.vector(bp),y=as.vector(M/3286)+CI95,c("B","B","B",
"D","C","A",
"G","F","E",
"J","I","H",
"M","L","K"
), pos=3,cex=0.8)
abline(h=0)
colors <- rep(c("gray20",
"gray50",
"gray80"),4)
#colors[8] <- "firebrick4"
bp = barplot(M/3286 ,beside=T, col=colors,
xlab="Closure Effort (% of routes canceled)",
ylab="Proportion of Airports Infected",
main="Comparison of Cancelation Strategies",
ylim=c(0,0.6)
)
legend("topright", legend=rownames(M), fill=colors, cex=0.8)
plotCI(bp, as.vector(M)/3286, CI95, add=T, pch=NA)
text(x=as.vector(bp),y=as.vector(M/3286)+CI95,c("B","B","B",
"D","C","A",
"G","F","E",
"J","I","H",
"M","L","K"
), pos=3,cex=0.8)
abline(h=0)
colors <- rep(c("gray20",
"gray50",
"gray80"),4)
#colors[8] <- "firebrick4"
bp = barplot(M/3286 ,beside=T, col=colors,
xlab="Closure Effort (% of routes canceled)",
ylab="Proportion of Airports Infected",
main="Comparison of Cancelation Strategies",
ylim=c(0,0.55)
)
legend("topright", legend=rownames(M), fill=colors, cex=0.8)
plotCI(bp, as.vector(M)/3286, CI95, add=T, pch=NA)
text(x=as.vector(bp),y=as.vector(M/3286)+CI95,c("B","B","B",
"D","C","A",
"G","F","E",
"J","I","H",
"M","L","K"
), pos=3,cex=0.8)
abline(h=0)
colors <- rep(c("gray20",
"gray50",
"gray80"),4)
colors[8] <- "firebrick4"
bp = barplot(M/3286 ,beside=T, col=colors,
xlab="Closure Effort (% of routes canceled)",
ylab="Proportion of Airports Infected",
main="Comparison of Cancelation Strategies",
ylim=c(0,0.55)
)
legend("topright", legend=rownames(M), fill=colors, cex=0.8)
plotCI(bp, as.vector(M)/3286, CI95, add=T, pch=NA)
text(x=as.vector(bp),y=as.vector(M/3286)+CI95,c("B","B","B",
"D","C","A",
"G","F","E",
"J","I","H",
"M","L","K"
), pos=3,cex=0.8)
abline(h=0)
colors <- rep(c("gray20",
"gray50",
"gray80"),4)
#colors[8] <- "firebrick4"
bp = barplot(M/3286 ,beside=T, col=colors,
xlab="Closure Effort (% of routes canceled)",
ylab="Proportion of Airports Infected",
main="Comparison of International Cancelation Strategies",
ylim=c(0,0.5)
)
legend("topright", legend=rownames(M), fill=colors, cex=0.75)
plotCI(bp, as.vector(M)/3286, CI95, add=T, pch=NA)
text(x=as.vector(bp),y=as.vector(M/3286)+CI95,c("B","B","B",
"D","C","A",
"G","F","E",
"J","I","H",
"M","L","K"
), pos=3,cex=0.8)
abline(h=0)
CI95 = (qnorm(0.975)  * sd / sqrt(n) )   / 3286
colors <- rep(c("gray20",
"gray50",
"gray80"),4)
colors[8] <- "firebrick4"
bp = barplot(M/3286 ,beside=T, col=colors,
xlab="Closure Effort (% of routes canceled)",
ylab="Proportion of Airports Infected",
main="Comparison of International Cancelation Strategies",
ylim=c(0,0.5)
)
legend("topright", legend=rownames(M), fill=colors, cex=0.75)
plotCI(bp, as.vector(M)/3286, CI95, add=T, pch=NA)
text(x=as.vector(bp),y=as.vector(M/3286)+CI95,c("B","B","B",
"D","C","A",
"G","F","E",
"J","I","H",
"M","L","K"
), pos=3,cex=0.8)
abline(h=0)
setwd("~/projects/airport_flu_modeling/data")
library("igraph")
edgelist <- read.csv("edgelist.csv")
edgelist
View(edgelist)
graph(as.matrix(c(edgelist$IATA_From,edgelist$IATA_To),ncol=2)
G <- graph(as.matrix(c(edgelist$IATA_From,edgelist$IATA_To),ncol=2))
G <- graph(matrix(c(edgelist$IATA_From,edgelist$IATA_To),ncol=2))
degree(G)
hist(degree(G))
hist(log(degree(G)))
hist(degree(G))
(
hist(log(degree(G)))
hist(log10(degree(G)))
hist(log(degree(G)))
V(g)
V(G)
V(g)$id
V(g)[1]$id
V(g)$name
V(g)[1]
V(G)[1]
V(G)[1]$id
V(G)[1]$name
V(G)[1]$value
V(G)[1]$IATA_From
edgelist
G['HEL']
V(G)['HEL']
relations <- cbind(edgelist$IATA_From, edgelist$IATA_To)
airport_data <- read.csv("airports.dat")
airport_data
relations
airport_data <- read.csv("airports.dat",header=F)
relations <- cbind(edgelist$IATA_From, edgelist$IATA_To)
View(airport_data)
G <- graph(relations,directed=TRUE, verticies=airport_data$V6)
G <- graph.data.frame(relations,directed=TRUE, verticies=airport_data$V6)
G <- graph.data.frame(relations,directed=TRUE, verticies=airport_data)
G <- graph.data.frame(relations,directed=TRUE, vertices=airport_data$V6)
G <- graph.data.frame(relations,directed=TRUE, vertices=airport_data)
relations
edgelist$IATA_From
relations <- data.frame(edgelist$IATA_From, edgelist$IATA_To)
relations
G <- graph.data.frame(relations,directed=TRUE, vertices=airport_data$V6)
names <- airport_data$V6
names
names <- edgelist$IATA_From
duplicates <- duplicated(names)
duplicates
names <- names[!names]
names <- names[!duplicates]
G <- graph.data.frame(relations,directed=TRUE, vertices=names)
names
names <- edgelist$IATA_From
names
duplicates <- duplicated(names)
names <- names[!duplicates]
names
G <- graph.data.frame(relations,directed=TRUE, vertices=names)
unique(c(edgelist$IATA_From,edgelist$IATA_To))
names <- c(edgelist$IATA_From, edgelist$IATA_To)
duplicates <- duplicated(names)
names <- names[!duplicates]
G <- graph.data.frame(relations,directed=TRUE, vertices=data.framenames)
G <- graph.data.frame(relations,directed=TRUE, vertices=names)
plot(G)
hist(log(degree(G)),
main="")
G$name
G$names
names <- data.frame(name=names[!duplicates])
G <- graph.data.frame(relations,directed=TRUE, vertices=names)
relations <- data.frame(edgelist$IATA_From, edgelist$IATA_To)
names <- c(edgelist$IATA_From, edgelist$IATA_To)
duplicates <- duplicated(names)
names <- data.frame(name=names[!duplicates])
G <- graph.data.frame(relations,directed=TRUE, vertices=names)
G
G$names
V(G)$name
V(G)$names
V(G)
G <- graph.data.frame(relations,directed=TRUE, vertices=names)
relations <- data.frame(edgelist$IATA_From, edgelist$IATA_To)
names <- c(edgelist$IATA_From, edgelist$IATA_To)
duplicates <- duplicated(names)
names <- data.frame(name=names[!duplicates])
G <- graph(length(names))
G <- graph(n=length(names))
G <- graph.empty(length(names))
for(index in 1:length(names)) {
V(g)[index]$name <- names[index]
}
g <- graph.empty(length(names))
for(index in 1:length(names)) {
V(g)[index]$name <- names[index]
}
V(g)
V(g)$names
V(g)$name
names
relations <- data.frame(edgelist$IATA_From, edgelist$IATA_To)
names <- c(edgelist$IATA_From, edgelist$IATA_To)
names
names <- append(edgelist$IATA_From, edgelist$IATA_To)
names
relations <- data.frame(edgelist$IATA_From, edgelist$IATA_To)
names <- append(edgelist$IATA_From, edgelist$IATA_To)
names
names <- append(as.character(edgelist$IATA_From), as.character(edgelist$IATA_To))
names
duplicates <- duplicated(names)
names <- data.frame(name=names[!duplicates])
names
relations <- data.frame(as.character(edgelist$IATA_From), as.character(edgelist$IATA_To))
g <- graph.data.frame(relations, directed=T, vertices=names)
V(g)
hist(log(degree(G)),
main="Distribution of Network Degree")
hist(log(degree(g)),
main="Distribution of Network Degree")
hist(log(degree(g)),
main="Distribution of Network Degree",
xlab="ln(Degree)")
hist(degree(nei(V(g)['ATL'])))
neighbors(V(g)['ATL'])
V(g)['ATL']
neighbors(G,'ATL')
neighbors(g,'ATL')
hit(degree(neighbors(g,'ATL'))
hist(degree(neighbors(g,'ATL')))
hist(degree(V(g)[neighbors(g,'ATL')]))
hist(degree(g,V(g)[neighbors(g,'ATL')]))
V(g)[neighbors(g,'ATL')]
degree(g,'ATL')
hist(log(degree(g,V(g)[neighbors(g,'ATL')])))
# Degree distribution for all airports
hist(log(degree(g)),
main="Distribution of Network Degree",
xlab="ln(Degree)")
degree(g)
which(degree(g) < 1)
which(degree(g) < 2)
# Degree distribution for all airports
hist(log(degree(g)),
main="Distribution of Network Degree",
xlab="ln(Degree)")
# Degree distribution for ATL
hist(log(degree(g,V(g)[neighbors(g,'ATL')])))
hist(log(degree(g,V(g)[neighbors(g,'BUF')])))
hist(log(degree(g,V(g)[neighbors(g,'MAN')])))
hist(log(degree(g,V(g)[neighbors(g,'ROC')])))
# Degree distribution for all airports
hist(log(degree(g)),
main="Distribution of Network Degree",
xlab="ln(Degree)")
# Degree distribution for ATL
hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
xlab="ln(Degree)")
hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
main="Degree distribution of ATL's Neighbors",
xlab="ln(Degree)")
# Degree distribution for ATL
hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
xlab="ln(Degree)")
hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)")
hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)")
hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
col="redbrick4"
xlab="ln(Degree)")
hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
col="redbrick4",
xlab="ln(Degree)")
hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
col="firebrick4",
xlab="ln(Degree)")
ATL_data <- log(degree(g,V(g)[neighbors(g,'ATL')])
)
his <- hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
col="firebrick4",
xlab="ln(Degree)")
hist
his
hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)),
ylim=c(0, max(his$counts)))
his
hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)),
ylim=c(0, max(his$counts)),
breaks=ATL_data$breaks)
hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)),
ylim=c(0, max(his$counts)),
breaks=his$breaks)
his <- hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
col="firebrick4",
xlab="ln(Degree)")
hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)),
ylim=c(0, max(his$counts)),
breaks=his$breaks)
ATL_data <- log(degree(g,V(g)[neighbors(g,'ATL')]))
his <- hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
col="firebrick4",
xlab="ln(Degree)")
hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)),
ylim=c(0, max(his$counts)),
breaks=his$breaks)
his2 <- hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)),
ylim=c(0, max(his$counts)),
breaks=his$breaks)
his2
his$breaks
his2
his
his <- hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
col="firebrick4",
xlab="ln(Degree)",
xlim=c(0,max(ATL_data)))
his2 <- hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)),
ylim=c(0, max(his$counts)),
breaks=his$breaks)
his <- hist(log(degree(g,V(g)[neighbors(g,'ATL')])),
main="Degree distribution of ATL's Neighbors",
col="firebrick4",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)))
his2 <- hist(log(degree(g,V(g)[neighbors(g,'ROC')])),
col="cadetblue4",
main="Degree distribution of ROC's Neighbors",
xlab="ln(Degree)",
xlim=c(min(ATL_data),max(ATL_data)),
ylim=c(0, max(his$counts)),
breaks=his$breaks)
hist(log(degree(g)),
main="Distribution of Network Degree",
xlab="ln(Degree)")
hist(log(degree(g)),
main="Distribution of Network Degree",
xlab="ln(Degree)",
col="gray30")
hist(log(degree(g)),
main="Distribution of Network Degree",
xlab="ln(Degree)",
col="gray70")
